{"version":3,"sources":["sun.svg","components/Atmosphere.js","components/Temperature.js","components/WeatherDescription.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Atmosphere","props","pressure","humidity","Temperature","temp","temp_min","temp_max","unit","convert","toFixed","WeatherDescription","main","description","Weather","Component","constructor","super","this","state","inputValue","weatherData","status","error","handleSubmit","e","preventDefault","zip","url","process","fetch","then","res","json","setState","cod","message","console","log","catch","err","checkStatus","renderWeather","weather","icon","render","className","onSubmit","value","onChange","target","type","pattern","placeholder","checked","htmlFor","App","src","Sun","alt","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,iC,0LCY5BC,MAVf,SAAoBC,GAAQ,MAChBC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAClB,OACI,6BACI,0CAAgBD,GAChB,0CAAgBC,KCebC,MApBf,SAAqBH,GAAQ,MACjBI,EAAoCJ,EAApCI,KAAMC,EAA8BL,EAA9BK,SAAUC,EAAoBN,EAApBM,SAAUC,EAAUP,EAAVO,KAElC,SAASC,EAAQJ,EAAMG,GACnB,MAAa,MAATA,GACY,IAAJH,EAAe,QAAQK,QAAQ,GAAK,OAAMF,EACjC,MAATA,GACAH,EAAO,QAAQK,QAAQ,GAAK,OAAMF,EAEtCH,EAAOG,EAGnB,OACI,6BACI,sCAAYC,EAAQJ,EAAMG,IAC1B,0CAAgBC,EAAQH,EAAUE,GAAM,6BAAxC,cAA0DC,EAAQF,EAAUC,MCLzEG,MAVf,SAA4BV,GAAQ,MACxBW,EAAsBX,EAAtBW,KAAMC,EAAgBZ,EAAhBY,YACd,OACI,6BACI,uCAAaD,GACb,sCAAYC,K,MCAxB,MAAMC,UAAgBC,YAEpBC,YAAYf,GACVgB,MAAMhB,GAENiB,KAAKC,MAAQ,CACXC,WAAY,GACZZ,KAAM,IACNa,YAAa,KACbC,OAAQ,OACRC,MAAO,MAIXC,aAAaC,GACXA,EAAEC,iBAEF,MAEMC,EAAMT,KAAKC,MAAMC,WAEjBQ,EAAG,8DAA0DD,EAA1D,qBAJME,oCAOfC,MAAMF,GAAKG,KAAKC,GAEPA,EAAIC,QACVF,KAAME,IAEPf,KAAKgB,SAAS,CAAEb,YAAaY,EAAMX,OAAQ,YAIR,MAA/BJ,KAAKC,MAAME,YAAYc,KAEvBjB,KAAKgB,SAAU,CAAEb,YAAaY,EAAMV,MAAOU,EAAKG,QAASd,OAAQ,UAErEe,QAAQC,IAAIL,EAAKE,IAAMF,EAAKG,WAC3BG,MAAOC,IAERtB,KAAKgB,SAAS,CAAEb,YAAa,KAAMC,OAAQ,UAG3Ce,QAAQC,IAAI,wBACZD,QAAQC,IAAIE,EAAIJ,WAKpBK,cACE,MAA0B,SAAtBvB,KAAKC,MAAMG,OACL,0DACuB,YAAtBJ,KAAKC,MAAMG,OACZ,4CACuB,UAAtBJ,KAAKC,MAAMG,OACZ,wCAEHJ,KAAKwB,gBAGdA,gBAEE,GAA+B,OAA3BxB,KAAKC,MAAME,cAUfgB,QAAQC,IAAIpB,KAAKC,MAAME,aACY,MAA/BH,KAAKC,MAAME,YAAYc,KAAa,SAEFjB,KAAKC,MAAME,YAAYsB,QAAQ,GAA3D/B,EAF8B,EAE9BA,KAAMC,EAFwB,EAExBA,YAAa+B,EAFW,EAEXA,KAFW,EAGmB1B,KAAKC,MAAME,YAAYT,KAAxEP,EAH8B,EAG9BA,KAAMH,EAHwB,EAGxBA,SAAUC,EAHc,EAGdA,SAAUG,EAHI,EAGJA,SAAUC,EAHN,EAGMA,SAE5C,OACE,6BACE,kBAAC,EAAD,CAAoBK,KAAMA,EAAMC,YAAaA,EAAa+B,KAAMA,IAChE,kBAAC,EAAD,CAAavC,KAAMA,EAAMC,SAAUA,EAAUC,SAAUA,EAAUC,KAAMU,KAAKC,MAAMX,OAClF,kBAAC,EAAD,CAAYN,SAAUA,EAAUC,SAAUA,MAMlD0C,SACE,OACE,yBAAKC,UAAU,WAGb,0BAAMC,SAAUtB,GAAKP,KAAKM,aAAaC,IAQrC,2BACEuB,MAAO9B,KAAKC,MAAMC,WAClB6B,SAAUxB,GAAKP,KAAKgB,SAAS,CAAEd,WAAYK,EAAEyB,OAAOF,QACpDG,KAAK,OACLC,QAAQ,yBACRC,YAAY,cAGd,4BAAQF,KAAK,UAAb,UAEA,yBAAKL,UAAU,SAEb,yBAAKA,UAAU,OACb,2BACEK,KAAK,QACLH,MAAM,IACNM,QAA6B,MAApBpC,KAAKC,MAAMX,KACpByC,SAAUxB,GAAKP,KAAKgB,SAAS,CAAE1B,KAAM,QALzC,IAMK,2BAAO+C,QAAQ,KAAf,YAGL,yBAAKT,UAAU,OACb,2BACEK,KAAK,QACLH,MAAM,IACNM,QAA6B,MAApBpC,KAAKC,MAAMX,KACpByC,SAAUxB,GAAKP,KAAKgB,SAAS,CAAE1B,KAAM,QALzC,IAMK,2BAAO+C,QAAQ,KAAf,eAGL,yBAAKT,UAAU,OACb,2BACEK,KAAK,QACLH,MAAM,IACNM,QAA6B,MAApBpC,KAAKC,MAAMX,KACpByC,SAAUxB,GAAKP,KAAKgB,SAAS,CAAE1B,KAAM,QALzC,IAMK,2BAAO+C,QAAQ,KAAf,aAMT,yBAAKT,UAAU,eACZ5B,KAAKuB,iBAQD3B,Q,MC7HA0C,MAXf,WACE,OACG,yBAAKV,UAAU,OACZ,yBAAKA,UAAU,aACb,yBAAKW,IAAKC,IAAKZ,UAAU,WAAWa,IAAI,SACxC,kBAAC,EAAD,SChBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OAAO,kBAAC,EAAD,MAASqB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAKwC,IACjCA,EAAaC,iB","file":"static/js/main.f20573c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.5017cd3e.svg\";","import React from 'react';\n\nfunction Atmosphere(props) {\n    const { pressure, humidity } = props\n    return (\n        <div>\n            <div>Pressure: {pressure}</div>\n            <div>Humidity: {humidity}</div>\n        </div>\n    )\n}\n\nexport default Atmosphere;","import React from 'react';\n\nfunction Temperature(props) {\n    const { temp, temp_min, temp_max, unit }  = props\n\n    function convert(temp, unit) {\n        if (unit === 'F') {\n            return (temp * (9/5) - 459.67).toFixed(1) + '°' + unit\n        } else if ( unit === 'C') {\n            return (temp - 273.15).toFixed(1) + '°' + unit\n        }\n        return (temp + unit)\n    }\n\n    return (\n        <div>\n            <div>Temp: {convert(temp, unit)}</div>\n            <div>Temp Min: {convert(temp_min, unit)}<br /> Temp Max: {convert(temp_max, unit)}</div>\n        </div>\n    )\n}\n\nexport default Temperature;","import React from 'react';\n\nfunction WeatherDescription(props) {\n    const { main, description } = props\n    return (\n        <div>\n            <div>Title: {main}</div>\n            <div>Desc: {description}</div>\n        </div>\n    )\n}\n\nexport default WeatherDescription;","import React, { Component } from 'react';\nimport Atmosphere from './Atmosphere';\nimport Temperature from './Temperature';\nimport WeatherDescription from './WeatherDescription';\n\nimport './Weather.css'\n\nclass Weather extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      inputValue: '',\n      unit: 'C',     // Used to hold value entered in the input field\n      weatherData: null,  // Used to hold data loaded from the weather API\n      status: 'idle',\n      error: null\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault()\n    // ! Get your own API key ! \n    const apikey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY\n    // Get the zip from the input\n    const zip = this.state.inputValue\n    // Form an API request URL with the apikey and zip\n    const url = `https://api.openweathermap.org/data/2.5/weather?zip=${zip},us&appid=${apikey}`\n    \n    // Get data from the API with fetch\n    fetch(url).then(res => {\n      // Handle the response stream as JSON\n      return res.json()\n    }).then((json) => {\n      // If the request was successful assign the data to component state\n      this.setState({ weatherData: json, status: \"success\" })\n      // ! This needs better error checking here or at renderWeather() \n      // It's possible to get a valid JSON response that is not weather \n      // data, for example when a bad zip code entered.\n      if (this.state.weatherData.cod !== 200) {\n            // If OpenWeather returns status error\n          this.setState( { weatherData: json, error: json.message, status: 'error' })\n        }\n      console.log(json.cod , json.message)\n    }).catch((err) => {\n      // If there is no data \n      this.setState({ weatherData: null, status: 'error' }) // Clear the weather data we don't have any to display\n\n      // Print an error to the console. \n      console.log('-- Error fetching --')\n      console.log(err.message)\n      // You may want to display an error to the screen here. \n    })\n  }\n\n  checkStatus() {\n    if (this.state.status === \"idle\") {\n      return (<div>Please enter your zipcode</div>)\n    } else if (this.state.status === \"loading\") {\n      return (<div>Fetching...</div>)\n    } else if (this.state.status === 'error') {\n      return (<div>Invalid</div>)\n    }\n    return this.renderWeather()\n  }\n\n  renderWeather() {\n    // This method returns undefined or a JSX component\n    if (this.state.weatherData === null) {\n      // If there is no data return undefined\n      return undefined\n    } \n\n    /* \n    This next step needs another level of error checking. It's \n    possible to get a JSON response for an invalid zip in which \n    case the step below fails. \n    */ \n    console.log(this.state.weatherData)\n    if (this.state.weatherData.cod === 200) {\n      // Take the weather data apart to more easily populate the component\n      const { main, description, icon } = this.state.weatherData.weather[0]\n      const { temp, pressure, humidity, temp_min, temp_max } = this.state.weatherData.main \n\n      return (\n        <div>\n          <WeatherDescription main={main} description={description} icon={icon} />\n          <Temperature temp={temp} temp_min={temp_min} temp_max={temp_max} unit={this.state.unit} />\n          <Atmosphere pressure={pressure} humidity={humidity}/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Weather\">\n\n        {/** This input uses the controlled component pattern */}\n        <form onSubmit={e => this.handleSubmit(e)}>\n\n          {/** \n          This pattern is used for input and other form elements \n          Set the value of the input to a value held in component state\n          Set the value held in component state when a change occurs at the input \n          */}\n\n          <input \n            value={this.state.inputValue} \n            onChange={e => this.setState({ inputValue: e.target.value })}\n            type=\"text\" \n            pattern=\"(\\d{5}([\\-]\\d{4})?)\"\n            placeholder=\"enter zip\"\n          />  \n\n          <button type=\"submit\">Submit</button>\n\n          <div className='Radio'>\n\n            <div className='row'>\n              <input \n                type=\"radio\"\n                value=\"C\"\n                checked={this.state.unit === \"C\"}\n                onChange={e => this.setState({ unit: \"C\" })}\n              /> <label htmlFor=\"C\">Celcius</label>\n            </div>\n\n            <div className='row'>\n              <input \n                type=\"radio\"\n                value=\"F\"\n                checked={this.state.unit === \"F\"}\n                onChange={e => this.setState({ unit: \"F\" })}\n              /> <label htmlFor=\"F\">Fahrenheit</label> \n            </div>\n\n            <div className='row'>\n              <input \n                type=\"radio\"\n                value=\"K\"\n                checked={this.state.unit === \"K\"}\n                onChange={e => this.setState({ unit: \"K\" })}\n              /> <label htmlFor=\"K\">Kelvin</label>\n            </div>\n          </div>\n        </form>\n\n        {/** Conditionally render this component */}\n        <div className=\"Description\">\n          {this.checkStatus()}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Weather;","\nimport React from 'react';\nimport Sun from './sun.svg';\nimport Weather from './components/Weather';\nimport './App.css';\n\n/** \n * This example illustrates a simple react project \n * that works with an external API. \n * \n * Take note of the comments they point common \n * problems you will need to solve with React. \n * \n * There are two ideas here\n * - Input/Controlled Component Pattern\n * - Conditionally Rendering components \n * \n * The project has an input field where a user will\n * input a zip code. It finds weather data for that\n * zip and displays it in a component. \n * \n * */\n\nfunction App() {\n  return(\n     <div className=\"App\">\n        <div className=\"container\">\n          <img src={Sun} className=\"App-logo\" alt=\"logo\" />\n          <Weather />\n        </div>\n     </div>\n  )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}